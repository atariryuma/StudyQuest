# .github/workflows/deploy-gas-app.yml
name: deploy-gas-app

################################################################################
# 基本設定
################################################################################
concurrency:
  group: deploy-gas-app
  cancel-in-progress: false

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - '.github/workflows/**'

permissions:
  contents: write          # CI が main に通常 push するための最小権限

env:
  NODE_VERSION: 20
  CLASP_VERSION: latest

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CLASPRC_JSON: ${{ secrets.CLASPRC_JSON }}
      DEPLOYMENT_ID: ${{ secrets.DEPLOYMENT_ID }}

    steps:
    ############################################################################
    # 1. Checkout & Node
    ############################################################################
    - uses: actions/checkout@v4
      with:
        persist-credentials: true
        fetch-depth: 1

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm

    ############################################################################
    # 2. Install deps & run tests
    ############################################################################
    - run: npm ci

    - id: pkg_ver
      run: |
        VERSION=$(jq -r .version package.json)
        echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

    - run: sed -i "s/__BUILD_VERSION__/v${{ steps.pkg_ver.outputs.VERSION }}/" src/Code.gs

    - run: npm test

    ############################################################################
    # 3. Install clasp & jq, set auth
    ############################################################################
    - run: |
        npm i -g @google/clasp@${{ env.CLASP_VERSION }}
        sudo apt-get update -y && sudo apt-get install -y jq

    - run: |
        mkdir -p ~/.config
        echo "${CLASPRC_JSON}" > ~/.clasprc.json

    ############################################################################
    # 4. GAS デプロイ (clasp push は force 必須)
    ############################################################################
    - name: Push to GAS & create new version
      run: |
        set -eux
        clasp push --force
        clasp version "v${{ steps.pkg_ver.outputs.VERSION }}"

    - name: Update existing Web-App deployment
      if: env.DEPLOYMENT_ID != ''
      run: |
        set -eux
        VNUM=$(clasp versions | awk '/^[0-9]+/{print $1}' | sort -nr | head -1)
        clasp update-deployment "$DEPLOYMENT_ID" \
          --versionNumber "$VNUM" \
          --description "v${{ steps.pkg_ver.outputs.VERSION }} (auto)"

    ############################################################################
    # 5. GitHub へ通常 push（force なし）
    ############################################################################
    - name: Commit artefacts & bump patch
      if: success()
      run: |
        set -eux
        git config user.name  "github-actions"
        git config user.email "github-actions@github.com"

        # 変更があればコミット
        git add -A
        git diff --cached --quiet || \
          git commit -m "build: embed v${{ steps.pkg_ver.outputs.VERSION }} [skip ci]" --no-verify

        # 次サイクル用に patch を +1
        npm version patch -m "chore: bump to %s [skip ci]" --no-verify

        # リモートを取り込みつつ線形履歴を維持
        git pull --rebase --autostash origin main

        # 通常 push（force 無し）
        git push --follow-tags
