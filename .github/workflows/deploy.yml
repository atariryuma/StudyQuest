# .github/workflows/deploy-gas-app.yml
name: deploy-gas-app
concurrency:
  group: deploy-gas-app
  cancel-in-progress: false
on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - '.github/workflows/**'
permissions:
  contents: write
env:
  NODE_VERSION: 20
  CLASP_VERSION: latest
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CLASPRC_JSON: ${{ secrets.CLASPRC_JSON }}
      DEPLOYMENT_ID: ${{ secrets.DEPLOYMENT_ID }}
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true
        fetch-depth: 1
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm
    - run: npm ci
    - id: pkg_ver
      run: |
        VERSION=$(jq -r .version package.json)
        echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
    - run: sed -i "s/__BUILD_VERSION__/v${{ steps.pkg_ver.outputs.VERSION }}/" src/Code.gs
    - run: npm test
    # ------------------------------------------------------------------ #
    # ここから GAS 用セットアップ
    # ------------------------------------------------------------------ #
    - run: |
        npm i -g @google/clasp@${{ env.CLASP_VERSION }}
        sudo apt-get update -y && sudo apt-get install -y jq
    - run: |
        mkdir -p ~/.config
        echo "${CLASPRC_JSON}" > ~/.clasprc.json
    - name: Clean up GAS project files
      run: |
        set -eux
        
        # まず全ファイルリストを取得
        echo "Current files in GAS project:"
        clasp files:list || true
        
        # JSON形式でファイルリストを取得し、escapeHtml関連を削除
        FILES_JSON=$(clasp files:list --json 2>/dev/null || echo "[]")
        echo "Files JSON: $FILES_JSON"
        
        # escapeHtml関連のファイルIDを取得・削除
        echo "$FILES_JSON" | jq -r '.[] | select(.name | test("escapeHtml|shared/escapeHtml")) | .id' | \
        while IFS= read -r ID; do
          if [ -n "$ID" ] && [ "$ID" != "null" ]; then
            echo "Deleting file with ID: $ID"
            echo y | clasp files:delete "$ID" || echo "Failed to delete $ID, continuing..."
          fi
        done
        
        # 少し待機してから再確認
        sleep 3
        echo "Files after cleanup:"
        clasp files:list || true
    
    # ------------------------------------------------------------------ #
    # push & version （リトライ機能付き）
    # ------------------------------------------------------------------ #
    - name: Push to GAS & create new version
      run: |
        set -eux
        
        # clasp push をリトライ機能付きで実行
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if clasp push --force; then
            echo "clasp push succeeded"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "clasp push failed (attempt $RETRY_COUNT/$MAX_RETRIES)"
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Retrying after cleaning up conflicting files..."
              
              # 再度クリーンアップ
              clasp files:list --json 2>/dev/null || echo "[]" | \
              jq -r '.[] | select(.name | contains("escapeHtml")) | .id' | \
              while read -r ID; do
                if [ -n "$ID" ]; then
                  echo "Cleaning up file ID: $ID"
                  echo y | clasp files:delete "$ID" || true
                fi
              done
              
              sleep 5
            else
              echo "Max retries reached. Exiting."
              exit 1
            fi
          fi
        done
        
        clasp version "v${{ steps.pkg_ver.outputs.VERSION }}"
    - if: env.DEPLOYMENT_ID != ''
      run: |
        set -eux
        VNUM=$(clasp versions | awk '/^[0-9]+/{print $1}' | sort -nr | head -1)
        clasp update-deployment "$DEPLOYMENT_ID" \
          --versionNumber "$VNUM" \
          --description "v${{ steps.pkg_ver.outputs.VERSION }} (auto)"
    # ------------------------------------------------------------------ #
    # GitHub へ通常 push
    # ------------------------------------------------------------------ #
    - if: success()
      run: |
        set -eux
        git config user.name  "github-actions"
        git config user.email "github-actions@github.com"
        git add -A
        git diff --cached --quiet || \
          git commit -m "build: embed v${{ steps.pkg_ver.outputs.VERSION }} [skip ci]" --no-verify
        npm version patch -m "chore: bump to %s [skip ci]" --no-verify
        git pull --rebase --autostash origin main
        git push --follow-tags
