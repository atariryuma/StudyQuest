# .github/workflows/deploy-gas-webapp.yml
# ────────────────────────────────────────────────
# GAS プロジェクトを自動テスト → 自動デプロイし、
# その後 package.json の patch を自動で +1 します
# ────────────────────────────────────────────────
name: deploy-gas-webapp

# ── 同じブランチ(main)のジョブは必ず 1 本ずつ順番に実行させる
concurrency:
  group: deploy-gas-webapp          # 「workflow 名 + ブランチ名」でも可
  # cancel-in-progress を付けない ── 途中で kill される事故を防ぐ

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - '.github/workflows/**'

permissions:
  contents: write                   # 自動コミット用

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      CLASPRC_JSON: ${{ secrets.CLASPRC_JSON }}
      DEPLOYMENT_ID: ${{ secrets.DEPLOYMENT_ID }}

    steps:
    #──────────────────────────────
    # ① Checkout
    #──────────────────────────────
    - name: Checkout
      uses: actions/checkout@v4
      with:
        persist-credentials: true
        fetch-depth: 1

    #──────────────────────────────
    # ② Node.js ＋ npm キャッシュ
    #──────────────────────────────
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    #──────────────────────────────
    # ③ 依存インストール（npm ci）
    #──────────────────────────────
    - name: Install dependencies
      run: npm ci

    #──────────────────────────────
    # ④ package.json の version を取得
    #──────────────────────────────
    - id: ver
      name: Get package version
      run: |
        VERSION=$(node -p 'require("./package.json").version')
        echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

    #──────────────────────────────
    # ⑤ Code.gs にビルド番号を注入
    #──────────────────────────────
    - name: Inject build version into Code.gs
      run: |
        sed -i "s/__BUILD_VERSION__/v${{ steps.ver.outputs.VERSION }}/" src/Code.gs

    #──────────────────────────────
    # ⑥ ユニットテスト
    #──────────────────────────────
    - name: Run tests
      run: npm test

    #──────────────────────────────
    # ⑦ clasp & jq をインストール
    #──────────────────────────────
    - name: Install clasp & jq
      run: |
        npm i -g @google/clasp@latest
        sudo apt-get update -y && sudo apt-get install -y jq

    #──────────────────────────────
    # ⑧ clasp 認証ファイルを配置
    #──────────────────────────────
    - name: Configure clasp auth
      run: |
        mkdir -p ~/.config
        echo "${CLASPRC_JSON}" > ~/.clasprc.json

    #──────────────────────────────
    # ⑨ push → GAS で新バージョン作成
    #──────────────────────────────
    - name: Push and create new GAS version
      run: |
        set -eux
        clasp push --force
        clasp version "v${{ steps.ver.outputs.VERSION }}"

    #──────────────────────────────
    # ⑩ 既存 Web-App デプロイを更新
    #──────────────────────────────
    - name: Update Web-App deployment
      run: |
        set -eux
        # 先頭行のバージョン番号だけ抽出
        VNUM=$(clasp versions | awk 'NR==1 {print $1}')
        clasp update-deployment "$DEPLOYMENT_ID" \
          --versionNumber "$VNUM" \
          --description "v${{ steps.ver.outputs.VERSION }} (auto-deploy)"

    #──────────────────────────────
    # ⑪ 次回開発用に patch を +1 & push
    #──────────────────────────────
    - name: Bump patch and push back
      if: ${{ success() }}
      run: |
        set -eux
        git config user.name github-actions
        git config user.email github-actions@github.com
        npm version patch -m "chore: bump to %s [skip ci]"
        git push --follow-tags --force-with-lease
