# .github/workflows/deploy-gas.yml
name: Deploy GAS Project

on:
  push:
    branches:
      - main

jobs:
  deploy-gas:
    name: Deploy GAS via clasp (overwrite existing deployment)
    runs-on: ubuntu-latest

    env:
      # リポジトリの Secrets として登録済み
      CLASPRC_JSON: ${{ secrets.CLASPRC_JSON }}
      DEPLOYMENT_ID: ${{ secrets.DEPLOYMENT_ID }}

    steps:
      # 1) リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2) Node.js をセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3) clasp をインストール
      - name: Install clasp (latest)
        run: |
          npm install --global @google/clasp@latest

      # 4) シークレットの CLASPRC_JSON を ~/.clasprc.json に書き出し
      - name: Configure ~/.clasprc.json for clasp
        run: |
          mkdir -p ~/.config
          echo "${CLASPRC_JSON}" > ~/.clasprc.json

      # 5) clasp push → 新バージョンを作成 → 既存 deploymentId に上書きデプロイ
      - name: Push & Deploy to Apps Script
        id: deploy
        run: |
          set -eux

          # 5-1) ソースを Apps Script 側に push（常に force）
          clasp push --force

          # 5-2) 新しいバージョン番号を作成
          #       「Created version number: X」を抽出して NEW_VER に入れる。
          NEW_VER=$(clasp version "auto-$(date +%Y%m%d%H%M%S)" \
            | grep 'Created version number:' | awk '{print $4}')
          echo "→ 新しいバージョン番号: $NEW_VER"

          # 5-3) 既存の DEPLOYMENT_ID を上書き更新する形でデプロイ
          clasp deploy \
            --deploymentId "${DEPLOYMENT_ID}" \
            --versionNumber "$NEW_VER" \
            --description "auto-deploy from GitHub Actions"

          # 5-4) 最終的な Web アプリ URL に "?page=login" を付与して出力
          FINAL_URL="https://script.google.com/macros/s/${DEPLOYMENT_ID}/exec?page=login"
          echo "✅ Web アプリ最新版の URL: ${FINAL_URL}"
          # （必要であれば GitHub Actions の出力値にもセット可能）
          echo "webapp_url=${FINAL_URL}" >> $GITHUB_OUTPUT

      # 6) （必要に応じて）後続ステップで FINAL_URL を使う例
      #    例えば Slack に通知するときなどに出力を使える
      - name: Show "webapp_url" output
        run: |
          echo "==== 出力された webapp_url ===="
          echo "${{ steps.deploy.outputs.webapp_url }}"
